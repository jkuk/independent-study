Prefix notation

Note:
Constants use pascal case.
Variables use camel case.

Implicit types
	Character
	Integer
	Boolean (not an actual type - constant that resolves to an Integer)
		True -> 1
		False -> 0

:	var initialization
''	Literal
""	Literal
	End of line
	example:
		: number 5
		: singleChar "d"

Note:
every token must be separated by a blank space or new line

+	Add
-	Subtract
*	Multiply
/	Divide
%	Mod
=	Equal
<	Less than
>	Greater than
<=	Less than or equal
>=	Greater than or equal

&	And
|	Or
~	Not
#	Xor

_	Character / String concatenation
	example:
		_ _ 'a' 'b' 'c'
		_ abc xyz

Note:
Function names use pascal case.
* denotes wildcard values
... denotes an arbitrary number of values

* *...[]	Function definition
^	Return value
	example:
		Function arg1 arg2 [
			^ + arg1 arg2
		]

Note:
Conditional statements accept a single Boolean, which is actually an Integer.
Any non-0 number evaluates to TRUE
0 evaluates to FALSE.

* ?[]	If statement definition
] * [	Else if
] [		Else
	example:
		> 3 0 ?[
			^ 'probably'
		] = 3 0 [
			^ 'maybe'
		] [
			^ 'nope'
		]

![] While loop definition
	example:
		: i 10
		> i 0 ![
			: i - i 1
		]
	
.[]	Array definitiion
	example:
		: array1 .[0 1 2]
		: array2 .[
			0
			1
			2
		]

*.*	Fetch element at specified Integer index
	example:
		. array 0
		. . coordinates -2 5

If time permits:
	Pointers:
		@	Dereference
			example:
				@ 0x1234

		$	Address of variable
			example:
				$ var1
	
	Objects:
		Note:
		Constructor methods begin with a capital letter
		.[]	Object constructor definition
			example:
				Object arg1 arg2 .[
					: x arg1
					: y arg2
				]

		*.* Fetch value of the specified field of the object
			example:
				: obj1 Object 'a' 'b'
				. obj1 x
				. obj2 y